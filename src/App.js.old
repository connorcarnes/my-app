import React, { useState } from "react";
import { createPortal } from "react-dom";
import { createRoot } from "react-dom/client";
import ReactDOM from "react-dom/client";
import "./index.css";
import reportWebVitals from "./reportWebVitals";

import AppLayout from "@cloudscape-design/components/app-layout";
//import Button from "@cloudscape-design/components/button";
//import Box from "@cloudscape-design/components/box";
import BreadcrumbGroup from "@cloudscape-design/components/breadcrumb-group";
//import Header from "@cloudscape-design/components/header";
import Input from "@cloudscape-design/components/input";
import SideNavigation from "@cloudscape-design/components/side-navigation";
import SpaceBetween from "@cloudscape-design/components/space-between";
//import Table from "@cloudscape-design/components/table";

import "./styles/base.scss";
import "./styles/top-navigation.scss";

import logo from "./logo.svg";
import { Notifications } from "./notifications";

import { useCollection } from "@cloudscape-design/collection-hooks";
import TopNavigation from "@cloudscape-design/components/top-navigation";
import {
  Box,
  Button,
  CollectionPreferences,
  Header,
  Pagination,
  Table,
  TextFilter,
} from "@cloudscape-design/components";
import allItems from "./data";
import {
  columnDefinitions,
  getMatchesCountText,
  paginationLabels,
  collectionPreferencesProps,
} from "./table-config";

function EmptyState({ title, subtitle, action }) {
  return (
    <Box textAlign="center" color="inherit">
      <Box variant="strong" textAlign="center" color="inherit">
        {title}
      </Box>
      <Box variant="p" padding={{ bottom: "s" }} color="inherit">
        {subtitle}
      </Box>
      {action}
    </Box>
  );
}

const navItems = [
  {
    type: "section",
    text: "Manage",
    items: [
      { type: "link", text: "Pages", href: "#/pages" },
      { type: "link", text: "Users", href: "#/users" },
    ],
  },
  {
    type: "section",
    text: "Set up",
    items: [
      { type: "link", text: "Database", href: "#/database" },
      { type: "link", text: "Authentication", href: "#/authentication" },
      { type: "link", text: "Analytics", href: "#/analytics" },
      { type: "link", text: "Predictions", href: "#/predictions" },
      { type: "link", text: "Interactions", href: "#/interactions" },
      { type: "link", text: "Notifications", href: "#/notifications" },
    ],
  },
];

const breadcrumbs = [
  {
    text: "Service name",
    href: "#",
  },
  {
    text: "Pages",
    href: "#",
  },
];

const i18nStrings = {
  searchIconAriaLabel: "Search",
  searchDismissIconAriaLabel: "Close search",
  overflowMenuTriggerText: "More",
  overflowMenuTitleText: "All",
  overflowMenuBackIconAriaLabel: "Back",
  overflowMenuDismissIconAriaLabel: "Close menu",
};

const profileActions = [
  { type: "button", id: "profile", text: "Profile" },
  { type: "button", id: "preferences", text: "Preferences" },
  { type: "button", id: "security", text: "Security" },
  {
    type: "menu-dropdown",
    id: "support-group",
    text: "Support",
    items: [
      {
        id: "documentation",
        text: "Documentation",
        href: "#",
        external: true,
        externalIconAriaLabel: " (opens in new tab)",
      },
      {
        id: "feedback",
        text: "Feedback",
        href: "#",
        external: true,
        externalIconAriaLabel: " (opens in new tab)",
      },
      { id: "support", text: "Customer support" },
    ],
  },
  { type: "button", id: "signout", text: "Sign out" },
];

export default function CollectionHooksTable() {
  const [preferences, setPreferences] = useState({
    pageSize: 10,
    visibleContent: ["Exercise", "Weight", "Reps", "RPE"],
  });
  const {
    items,
    actions,
    filteredItemsCount,
    collectionProps,
    filterProps,
    paginationProps,
  } = useCollection(allItems, {
    filtering: {
      empty: (
        <EmptyState
          title="No instances"
          subtitle="No instances to display."
          action={<Button>Create instance</Button>}
        />
      ),
      noMatch: (
        <EmptyState
          title="No matches"
          subtitle="We canâ€™t find a match."
          action={
            <Button onClick={() => actions.setFiltering("")}>
              Clear filter
            </Button>
          }
        />
      ),
    },
    pagination: { pageSize: preferences.pageSize },
    sorting: {},
    selection: {},
  });
  const { selectedItems } = collectionProps;
  return (
    <Table
      ariaLabels={{
        activateEditLabel: (column, item) =>
          `Edit ${item.name} ${column.header}`,
        cancelEditLabel: (column) => `Cancel editing ${column.header}`,
        submitEditLabel: (column) => `Submit editing ${column.header}`,
        submittingEditText: () => "Submitting edit",
        successfulEditLabel: () => "Edit successful",
        tableLabel: "Table with inline editing",
      }}
      {...collectionProps}
      selectionType="multi"
      header={
        <Header
          counter={
            selectedItems.length
              ? `(${selectedItems.length}/${allItems.length})`
              : `(${allItems.length})`
          }
        >
          Training Log
        </Header>
      }
      columnDefinitions={columnDefinitions}
      visibleColumns={preferences.visibleContent}
      items={items}
      pagination={
        <Pagination {...paginationProps} ariaLabels={paginationLabels} />
      }
      filter={
        <TextFilter
          {...filterProps}
          countText={getMatchesCountText(filteredItemsCount)}
          filteringAriaLabel="Filter instances"
        />
      }
      preferences={
        <CollectionPreferences
          {...collectionPreferencesProps}
          preferences={preferences}
          onConfirm={({ detail }) => setPreferences(detail)}
        />
      }
    />
  );
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
